package contorller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUpload;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import domain.BoardVO;
import domain.PagingVO;
import handler.FileHandler;
import handler.PagingHandler;
import net.coobird.thumbnailator.Thumbnails;
import service.BoardService;
import service.BoardServiceImpl;

@WebServlet("/brd/*")
public class BoardController extends HttpServlet {
	private static final long serialVersionUID = 1L;

	private static Logger log = LoggerFactory.getLogger(BoardController.class);
	private RequestDispatcher rdp; // 웹의 목적지 주소로 객체를 전달해주는 객체.
	private String destPage; // 목적지 주소를 저장해주는 변수.
	private int isOk; // DB의 insert, update, delete의 결과를 받는 변수.
	private BoardService bsv; // interface
	// 파일경로를 저장할 변수 선언
	private String savePath;
	// 인코딩 설정시
	private final String UTF8 = "utf-8";

	public BoardController() {
		bsv = new BoardServiceImpl(); // interface 구현체
	}

	protected void service(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		// 케릭터인코딩 설정, 컨텐츠 타입 설정
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		response.setContentType("text/html; charset-8");

		String uri = request.getRequestURI();
		log.info(" >> uri" + uri);
		String path = uri.substring(uri.lastIndexOf("/") + 1);
		log.info(" >> path" + path);

		switch (path) {
		case "register":
			destPage = "/board/register.jsp";
			break;

		case "insert":
			try {
				// 파일을 업로드할 물리적인 경로를 설정
				// getServletContext().getRealPath(webapp) -> 현재 내 프로젝트의 경로
				savePath = getServletContext().getRealPath("/_fileupload");
				log.info(" >> savePath >> : " + savePath);
				File fileDir = new File(savePath); // File은 java.io로 import

				// 다운 받은걸로 import 하기
				// dff = FileItemFactory
				DiskFileItemFactory fileItemFactory = new DiskFileItemFactory();

				// 파일의 저장위치를 담고있는 객체를 저장.
				fileItemFactory.setRepository(fileDir);

				// 파일을 저장하기위한 임시 메모리 용량설정 : byte단위
				fileItemFactory.setSizeThreshold(2 * 1024 * 1024); // 2MB

				BoardVO bvo = new BoardVO();

				// muultipart/form-data 형식으로 넘어온 req 객체를 다루기 쉽게 변환해주는 역할
				// dff = fileItemFactory
				ServletFileUpload FileUpload = new ServletFileUpload(fileItemFactory);

				// parseRequest
				List<FileItem> itemList = FileUpload.parseRequest(request);
				for (FileItem item : itemList) {

					log.info("파일 아이템 정보 >> : " + item);

					switch (item.getFieldName()) {
					case "title":
						bvo.setTitle(item.getString(UTF8)); // 인코딩 형식을담아서 변환
						break;

					case "writer":
						bvo.setWriter(item.getString(UTF8)); // 인코딩 형식을담아서 변환
						break;

					case "content":
						bvo.setContent(item.getString(UTF8)); // 인코딩 형식을담아서 변환
						break;

					case "image_file":
						// 이미지가 있는지 없는지 체크
						if (item.getSize() > 0) { // 데이터의 크기를 이용하여 유무를 결정.
							// 경로를 포함한 파일이름 ****/dog.jpg -> 이름만 분리
							String fileName = item.getName().substring(item.getName().lastIndexOf("/") + 1);
							fileName = System.currentTimeMillis() + "_" + fileName;
							log.info(">> 파일 이름 >> : " + fileName);
							File uploadFilePath = new File(fileDir + File.separator + fileName);
							log.info(" >> 실제 파일경로 >> : " + uploadFilePath);

							// 저장
							try {
								item.write(uploadFilePath); // 자바 객체를 디스크에 쓰기.
								bvo.setImage_file(fileName);

								// 썸네일 작업 -> 리스트 페이지에서 트래픽 과다사용 방지
								Thumbnails.of(uploadFilePath).size(75, 75)
										.toFile(new File(fileDir + File.separator + "TH_" + fileName));

							} catch (Exception e) {
								// TODO: handle exception
								log.info(" >> file writer on disk fail >> : ");
								e.printStackTrace();
							}

						}
						break;
					}
				}
				isOk = bsv.insert(bvo);
				log.info(" >> insert : " + (isOk > 0 ? "성공" : "실패"));
				destPage = "page";

			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
			break;

//			try {
//				
//				String title = request.getParameter("title");
//				String writer = request.getParameter("writer");
//				String content = request.getParameter("content");
//
//				BoardVO bvo = new BoardVO(title, writer, content);
//
//				isOk = bsv.insert(bvo);
//
//				log.info(" >> insert : " + (isOk > 0 ? "성공" : "실패"));
//				destPage = "list";
//			}
//
//			catch (Exception e) {
//				// TODO: handle exception
//				e.printStackTrace();
//			}

		case "list":
			try {
				ArrayList<BoardVO> list = bsv.list();
				request.setAttribute("list", list);
				log.info(" >> 글목록 가져오기 성공 : ");
				destPage = "/board/list.jsp";
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
			break;

		case "page":
			try {
				int pageNo2 = 1;
				int qty = 10;

				// 검색
				String type = "";
				String keyword = "";
				if (request.getParameter("type") != null) {
					type = request.getParameter("type");
					keyword = request.getParameter("keyword");
					log.info(" >> type : >> " + type + " >> keyword : >> " + keyword);
				}

				if (request.getParameter("pageNo") != null) {
					pageNo2 = Integer.parseInt(request.getParameter("pageNo"));
					qty = Integer.parseInt(request.getParameter("qty"));
				}
				PagingVO pgvo = new PagingVO(pageNo2, qty);
				pgvo.setType(type);
				pgvo.setKeyword(keyword);
				log.info(" >> pgvo : " + pgvo);

				// 전체 페이지 개수
				int totCnt = bsv.getTotal(pgvo);
				log.info(" >> 전체 페이지 개수 << : " + totCnt + " 개");

				// limit를 이용한 select List를 호출 (startPage, qty
				List<BoardVO> list = bsv.getPageList(pgvo);
				log.info(" >> LIST >> : " + list.get(0));
				// 한페이지에 나와야하는 리스트
				log.info(" >> list << : " + list);
				PagingHandler ph = new PagingHandler(pgvo, totCnt);
				request.setAttribute("pgh", ph);
				request.setAttribute("list", list);
				log.info("pageList 성공 : ");
				destPage = "/board/list.jsp";

			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
			break;

		case "detail":
			try {
				int bno = Integer.parseInt(request.getParameter("bno"));
				BoardVO bvo = bsv.get(bno);
				log.info(">> bvo > " + bvo);
				request.setAttribute("bvo", bvo);
				destPage = "/board/detail.jsp";
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
			break;

		case "modify":
			int bno = Integer.parseInt(request.getParameter("bno"));
			try {
				BoardVO bvo = bsv.get(bno);
				request.setAttribute("bvo", bvo);
				destPage = "/board/modify.jsp";
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
			break;

		case "edit":
			try {
				savePath = getServletContext().getRealPath("/_fileupload");
				File fileDir = new File(savePath);

				DiskFileItemFactory fileItemFactory = new DiskFileItemFactory();
				fileItemFactory.setRepository(fileDir);
				fileItemFactory.setSizeThreshold(2 * 1024 * 1024);

				BoardVO bvo = new BoardVO();
				ServletFileUpload fileupload = new ServletFileUpload(fileItemFactory);
				log.info(" >> update 준비 >> : ");

				List<FileItem> itemList = fileupload.parseRequest(request);

				String old_file = null;
				for (FileItem item : itemList) {
					switch (item.getFieldName()) {
					case "bno":
						bvo.setBno(Integer.parseInt(item.getString(UTF8)));
						break;
					case "title":
						bvo.setTitle(item.getString(UTF8));
						break;
					case "content":
						bvo.setContent(item.getString(UTF8));
						break;
					case "image_file":
						// 기존 파일의 이름을 가져와서 담기
						old_file = item.getString(UTF8);
						break;
					case "new_file":
						if (item.getSize() > 0) { // 새로운 파일이 등록됨.
							if (old_file != null) {
								// 파일핸들러 호출 ( 기존파일을 삭제 )
								FileHandler fileHandler = new FileHandler();
								isOk = fileHandler.deleteFile(old_file, savePath);
							}
							// 이름설정 ******/dog.jpg
							String FileName = item.getName().substring(item.getName().lastIndexOf("/") + 1);
							log.info(" >> new_FileName >> : " + FileName);

							// 실제저장이름
							FileName = System.currentTimeMillis() + "_" + FileName;
							File uploadFilePath = new File(fileDir + File.separator + FileName);
							try {
								item.write(uploadFilePath);
								bvo.setImage_file(FileName);
								log.info(" >> bvo.image_file >> : " + bvo.getImage_file());
								Thumbnails.of(uploadFilePath).size(75, 75)
										.toFile(new File(fileDir + File.separator + "TH_" + FileName));
							} catch (Exception e2) {
								// TODO: handle exception
								log.info(" >> file update on disk fail >> : ");
								e2.printStackTrace();
							}
						} else { // 새로운파일이 없다면
							// 기존파일을 다시 bvo객체에 저장
							bvo.setImage_file(old_file);
						}
						break;
					}
				}

//				int Mbno = Integer.parseInt(request.getParameter("bno"));
//				String Mtitle = request.getParameter("title");
//				String Mcontent = request.getParameter("content");
//				
//				BoardVO Mbvo = new BoardVO(Mbno, Mtitle, Mcontent);

				isOk = bsv.update(bvo);
				log.info(" >> edit : " + (isOk > 0 ? "성공" : "실패"));
			} catch (Exception e) {
				// TODO: handle exception

				e.printStackTrace();
			}
			destPage = "page";
			break;

		case "remove":

			try {
				int Rbno = Integer.parseInt(request.getParameter("bno"));
				// 파일 삭제 추가
				BoardVO bvo = bsv.get(Rbno);
				String filePath = getServletContext().getRealPath("/_fileupload");
				String fileName = bvo.getImage_file();
				
				
				// 파일핸들러 호출 (삭제)
				FileHandler fileHandler = new FileHandler();
				fileHandler.deleteFile(fileName, filePath);
				log.info("filePath >>>>>>>>>>>>>>>>>>>>>>>>> : " + filePath);
				
				isOk = bsv.remove(Rbno);
				log.info(" >>>>>> removefilename >>>>>>> : "+fileName);
				log.info(" >> remove : " + (isOk > 0 ? "성공" : "실패"));
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
			destPage = "page";
			break;

		}

		rdp = request.getRequestDispatcher(destPage);
		rdp.forward(request, response);
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		// TODO Auto-generated method stub
		service(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		// TODO Auto-generated method stub
		service(request, response);
	}

}
