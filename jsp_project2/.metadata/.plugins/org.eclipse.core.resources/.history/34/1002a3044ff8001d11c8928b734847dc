package contorller;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import domain.CommentVO;
import service.CommentContorllerImpl;
import service.CommentService;

@WebServlet("/cmt/*")
public class CommentContorller extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger log = LoggerFactory.getLogger(CommentContorller.class);
	// 목적지 주소로 보내는 destPage 쓰지않음.

	// 비동기 통신으로 요청이 온곳으로 돌려보냄.
	private int isOk;
	private CommentService csv;

	public CommentContorller() {
		// TODO Auto-generated constructor stub
		csv = new CommentContorllerImpl();

	}

	protected void service(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
		// TODO Auto-generated method stub
		req.setCharacterEncoding("utf-8");
		res.setCharacterEncoding("utf-8");
		// contenttype은 사용하지않음.

		// bre/list, bre/register X
		// > cmt/post/1, cmt/modify/1 -> REST API방식
		String uri = req.getRequestURI();
		log.info(" >> URI : >> " + uri);
		// > // modify/1 , post

		String pathUri = uri.substring("/cmt/".length()); // > // modify/1 , post
		String path = pathUri; // post
		String pathVar = "";
		if (pathUri.contains("/")) {

			path = pathUri.substring(0, pathUri.lastIndexOf("/")); // modify

			pathVar = pathUri.substring(pathUri.lastIndexOf("/") + 1); // 1
		}

		log.info(path);
		log.info(pathVar);

		switch (path) {
		case "post":
			try {
				// js에서 보낸 데이터를 StringBuffer로 읽어들이는 작업.
				StringBuffer sb = new StringBuffer();
				String line = "";
				BufferedReader br = req.getReader(); // 댓글 객체
				while ((line = br.readLine()) != null) { // < 값이 남아 있다면
					sb.append(line);
				}
				log.info(" >> sb : >>" + sb.toString());

				// 객체로 생성
				// JSON <-> text 변경가능
				JSONParser parser = new JSONParser();
				JSONObject jsonObj = (JSONObject) parser.parse(sb.toString());

				int bno = Integer.parseInt(jsonObj.get("bno").toString());
				String writer = jsonObj.get("writer").toString();
				String content = jsonObj.get("content").toString();
				CommentVO cvo = new CommentVO(bno, writer, content);
				isOk = csv.post(cvo);
				log.info(" >> post : >> " + (isOk > 0 ? "성공" : "실패"));

				// 결과전송
				PrintWriter out = res.getWriter(); // 응답객체에 실어서
				out.print(isOk);

			} catch (Exception e) {
				// TODO: handle exception
				log.info(" >> comment post >> ERR");
				e.printStackTrace();
			}
			break;

		case "list":

			try {
				int bno = Integer.parseInt(pathVar);

				List<CommentVO> list = csv.getList(bno);
				log.info(" >> Comment List >> DB OK  <<");

				// json 형태로 변환해서 printWriter
				JSONObject[] jsonObjArr = new JSONObject[list.size()];
				JSONArray jsonObjList = new JSONArray();

				for (int i = 0; i < list.size(); i++) {

					jsonObjArr[i] = new JSONObject(); // key : value
					jsonObjArr[i].put("cno", list.get(i).getCno());
					jsonObjArr[i].put("bno", list.get(i).getBno());
					jsonObjArr[i].put("writer", list.get(i).getWriter());
					jsonObjArr[i].put("content", list.get(i).getContent());
					jsonObjArr[i].put("reg_date", list.get(i).getReg_date());

					jsonObjList.add(jsonObjArr[i]);
				}

				log.info(" >> jsonObjList >> : " + jsonObjList);
				String jsonData = jsonObjList.toJSONString();
				log.info(" >> jsonData >> : " + jsonData);
				
				PrintWriter out = res.getWriter();
				out.print(jsonData);

			} catch (Exception e) {
				// TODO: handle exception
				log.info(" >> list err << ");
				e.printStackTrace();
			}
			break;

		case "remove":
			int cno Integer.parseInt(req.getParameter("cnoVal")); // 쿼리스트링 방식
			log.info(" >> cno >> : "+cno);
			
			isOk = csv.remove(cno);
			log.info(">> remove >> : "+ ((isOk>0)? "ok":"fail"));
			break;
			
		case "modify":
			break;
		}

	}

	protected void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
		// TODO Auto-generated method stub
		service(req, res);
	}

	protected void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
		// TODO Auto-generated method stub
		service(req, res);

	}

}
